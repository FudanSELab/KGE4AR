org.apache.commons:commons-io<L>org.apache.commons.io.EndianUtils.writeSwappedShort(byte[], int, short)
org.apache.commons:commons-io<L>org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)
org.apache.commons:commons-io<L>org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)
org.apache.commons:commons-io<L>org.apache.commons.io.filefilter.WildcardFilter.accept(java.io.File)
org.apache.commons:commons-io<L>org.apache.commons.io.output.LockableFileWriter.createLock()
org.apache.commons:commons-io<L>org.apache.commons.io.IOCase.convertCase(java.lang.String)
org.apache.commons:commons-io<L>org.apache.commons.io.input.ProxyInputStream.read(byte[])
org.apache.commons:commons-io<L>org.apache.commons.io.output.ByteArrayOutputStream.write(byte[], int, int)
org.apache.commons:commons-io<L>org.apache.commons.io.filefilter.DirectoryFileFilter.DirectoryFileFilter()
org.apache.commons:commons-io<L>org.apache.commons.io.FileCleaner.track(java.lang.String, java.lang.Object)
org.apache.commons:commons-io<L>org.apache.commons.io.input.NullReader.NullReader(long, boolean, boolean)
org.apache.commons:commons-io<L>org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String, java.lang.String)
org.apache.commons:commons-io<L>org.apache.commons.io.output.CountingOutputStream.resetCount()
org.apache.commons:commons-io<L>org.apache.commons.io.filefilter.EmptyFileFilter.accept(java.io.File)
org.apache.commons:commons-io<L>org.apache.commons.io.input.NullReader.read()
com.google.guava:guava-io<L>com.google.common.io.CountingInputStream.skip(long)
com.google.guava:guava-io<L>com.google.common.io.Flushables.flush(java.io.Flushable, boolean)
com.google.guava:guava-io<L>com.google.common.io.ByteArrayDataInput.readUnsignedByte()
com.google.guava:guava-io<L>com.google.common.io.ByteArrayDataInput.readByte()
com.google.guava:guava-io<L>com.google.common.io.FileBackedOutputStream.reset()
com.google.guava:guava-io<L>com.google.common.io.ByteStreams.ByteArrayDataOutputStream.write(byte[], int, int)
com.google.guava:guava-io<L>com.google.common.io.CountingInputStream.read()
com.google.guava:guava-io<L>com.google.common.io.LineProcessor.getResult()
com.google.guava:guava-io<L>com.google.common.io.Files.copy(java.io.File, java.io.OutputStream)
com.google.guava:guava-io<L>com.google.common.io.AppendableWriter.checkNotClosed()
com.google.guava:guava-io<L>com.google.common.io.LimitInputStream.available()
com.google.guava:guava-io<L>com.google.common.io.ByteStreams.getDigest(InputSupplier<? extends InputStream>, final MessageDigest)
com.google.guava:guava-io<L>com.google.common.io.Files.createTempDir()
com.google.guava:guava-io<L>com.google.common.io.ByteArrayDataOutput.writeChar(int)
com.google.guava:guava-io<L>com.google.common.io.MultiInputStream.close()
com.google.guava:guava-base<L>com.google.common.base.Preconditions.checkPositionIndex(int, int)
com.google.guava:guava-base<L>com.google.common.base.Preconditions.badElementIndex(int, int, java.lang.String)
com.google.guava:guava-base<L>com.google.common.base.Joiner.toString(java.lang.Object)
com.google.guava:guava-base<L>com.google.common.base.Splitter.AbstractIterator.tryToComputeNext()
com.google.guava:guava-base<L>com.google.common.base.Preconditions.checkPositionIndex(int, int, java.lang.String)
com.google.guava:guava-base<L>com.google.common.base.Predicates.or(com.google.common.base.Predicate<? super T>, com.google.common.base.Predicate<? super T>)
com.google.guava:guava-base<L>com.google.common.base.Joiner.appendTo(A, java.lang.Object[])
com.google.guava:guava-base<L>com.google.common.base.CharMatcher.And.And(java.util.List<com.google.common.base.CharMatcher>)
com.google.guava:guava-base<L>com.google.common.base.Splitter.on(java.util.regex.Pattern)
com.google.guava:guava-base<L>com.google.common.base.Splitter.on(java.lang.String)
com.google.guava:guava-base<L>com.google.common.base.Functions.IdentityFunction.toString()
com.google.guava:guava-base<L>com.google.common.base.Predicates.InstanceOfPredicate.InstanceOfPredicate(java.lang.Class<?>)
com.google.guava:guava-base<L>com.google.common.base.Predicates.NotPredicate.toString()
com.google.guava:guava-base<L>com.google.common.base.Suppliers.ExpiringMemoizingSupplier.ExpiringMemoizingSupplier(com.google.common.base.Supplier<T>, long, java.util.concurrent.TimeUnit)
com.google.guava:guava-base<L>com.google.common.base.Predicates.AndPredicate.apply(T)
commons-lang:commons-lang<L>org.apache.commons.lang.text.StrBuilder.indexOf(char)
commons-lang:commons-lang<L>org.apache.commons.lang.ArrayUtils.lastIndexOf(int[], int)
commons-lang:commons-lang<L>org.apache.commons.lang.time.FastDateFormat.TextField.estimateLength()
commons-lang:commons-lang<L>org.apache.commons.lang.enums.Enum.init(java.lang.String)
commons-lang:commons-lang<L>org.apache.commons.lang.builder.CompareToBuilder.reflectionAppend(java.lang.Object, java.lang.Object, java.lang.Class, org.apache.commons.lang.builder.CompareToBuilder, boolean, java.lang.String[])
commons-lang:commons-lang<L>org.apache.commons.lang.mutable.MutableObject.hashCode()
commons-lang:commons-lang<L>org.apache.commons.lang.StringUtils.isAllUpperCase(java.lang.String)
commons-lang:commons-lang<L>org.apache.commons.lang.builder.CompareToBuilder.append(int[], int[])
commons-lang:commons-lang<L>org.apache.commons.lang.builder.ReflectionToStringBuilder.setAppendStatics(boolean)
commons-lang:commons-lang<L>org.apache.commons.lang.text.StrMatcher.commaMatcher()
commons-lang:commons-lang<L>org.apache.commons.lang.math.NumberUtils.max(int, int, int)
commons-lang:commons-lang<L>org.apache.commons.lang.StringUtils.indexOfIgnoreCase(java.lang.String, java.lang.String)
commons-lang:commons-lang<L>org.apache.commons.lang.NotImplementedException.printStackTrace(java.io.PrintStream)
commons-lang:commons-lang<L>org.apache.commons.lang.math.NumberUtils.stringToInt(java.lang.String)
commons-lang:commons-lang<L>org.apache.commons.lang.StringUtils.remove(java.lang.String, char)
org.json:json<L>org.json.CDL.toJSONArray(JSONArray, JSONTokener)
org.json:json<L>org.json.CDL.rowToJSONObject(JSONArray, JSONTokener)
org.json:json<L>org.json.JSONObject.getDouble(java.lang.String)
org.json:json<L>org.json.JSONTokener.nextClean()
org.json:json<L>org.json.JSONObject.wrap(java.lang.Object)
org.json:json<L>org.json.JSONArray.put(int, double)
org.json:json<L>org.json.JSONTokener.dehexchar(char)
org.json:json<L>org.json.JSONTokener.JSONTokener(java.io.Reader)
org.json:json<L>org.json.JSONTokener.skipTo(char)
org.json:json<L>org.json.JSONObject.optJSONArray(java.lang.String)
org.json:json<L>org.json.JSONArray.optEnum(java.lang.Class<E>, int)
org.json:json<L>org.json.JSONWriter.append(java.lang.String)
org.json:json<L>org.json.JSONObject.optBigInteger(java.lang.String, java.math.BigInteger)
org.json:json<L>org.json.JSONObject.toJSONArray(JSONArray)
org.json:json<L>org.json.JSONObject.writeValue(java.io.Writer, java.lang.Object, int, int)
com.google.code.gson:gson<L>com.google.gson.internal.Streams.AppendableWriter.close()
com.google.code.gson:gson<L>com.google.gson.internal.bind.JsonTreeWriter.JsonTreeWriter()
com.google.code.gson:gson<L>com.google.gson.internal.JavaVersion.determineMajorJavaVersion()
com.google.code.gson:gson<L>com.google.gson.internal.ReflectionAccessFilterHelper.canAccess(java.lang.reflect.AccessibleObject, java.lang.Object)
com.google.code.gson:gson<L>com.google.gson.internal.$Gson$Types.getRawType(java.lang.reflect.Type)
com.google.code.gson:gson<L>com.google.gson.internal.bind.util.ISO8601Utils.format(java.util.Date, boolean)
com.google.code.gson:gson<L>com.google.gson.internal.Streams.write(com.google.gson.JsonElement, com.google.gson.stream.JsonWriter)
com.google.code.gson:gson<L>com.google.gson.internal.bind.MapTypeAdapterFactory.Adapter.keyToString(com.google.gson.JsonElement)
com.google.code.gson:gson<L>com.google.gson.internal.LazilyParsedNumber.hashCode()
com.google.code.gson:gson<L>com.google.gson.JsonElement.getAsCharacter()
com.google.code.gson:gson<L>com.google.gson.internal.LazilyParsedNumber.longValue()
com.google.code.gson:gson<L>com.google.gson.JsonArray.getAsLong()
com.google.code.gson:gson<L>com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.BoundField.read(com.google.gson.stream.JsonReader, java.lang.Object)
com.google.code.gson:gson<L>com.google.gson.internal.sql.SqlDateTypeAdapter.write(com.google.gson.stream.JsonWriter, java.sql.Date)
com.google.code.gson:gson<L>com.google.gson.internal.bind.NumberTypeAdapter.write(com.google.gson.stream.JsonWriter, java.lang.Number)
org.mockito:mockito-all<L>org.mockito.internal.stubbing.StubbedInvocationMatcher.addAnswer(Answer)
org.mockito:mockito-all<L>org.mockito.cglib.core.CodeEmitter.iinc(Local, int)
org.mockito:mockito-all<L>org.mockito.asm.signature.SignatureVisitor.visitArrayType()
org.mockito:mockito-all<L>org.mockito.internal.matchers.ContainsExtraTypeInformation.typeMatches(java.lang.Object)
org.mockito:mockito-all<L>org.mockito.exceptions.verification.ArgumentsAreDifferent.ArgumentsAreDifferent(java.lang.String)
org.mockito:mockito-all<L>org.mockito.Matchers.isNotNull()
org.mockito:mockito-all<L>org.mockito.internal.util.reflection.FieldInitializer.initialize()
org.mockito:mockito-all<L>org.mockito.internal.invocation.InvocationsFinder.removeVerifiedInOrder(List<Invocation>, InOrderContext)
org.mockito:mockito-all<L>org.mockito.cglib.proxy.Enhancer.create(Class, Class[], Callback)
org.mockito:mockito-all<L>org.mockito.Mockito.mock(java.lang.Class<T>, java.lang.String)
org.mockito:mockito-all<L>org.mockito.AdditionalMatchers.leq(int)
org.mockito:mockito-all<L>org.mockito.cglib.transform.ClassFilter.accept(java.lang.String)
org.mockito:mockito-all<L>org.mockito.internal.creation.cglib.AcrossJVMSerializationFeature.MockitoMockObjectOutputStream.MockitoMockObjectOutputStream(java.io.ByteArrayOutputStream)
org.mockito:mockito-all<L>org.mockito.cglib.transform.impl.InterceptFieldCallback.writeBoolean(java.lang.Object, java.lang.String, boolean, boolean)
org.mockito:mockito-all<L>org.mockito.internal.creation.instance.Instantiator.newInstance(java.lang.Class<T>)
org.jmock:jmock<L>org.jmock.internal.InvocationExpectationBuilder.of(Matcher<?>)
org.jmock:jmock<L>org.jmock.internal.InvocationExpectationBuilder.withNoArguments()
org.jmock:jmock<L>org.jmock.lib.CurrentStateMatcher.isCurrently(java.lang.String)
org.jmock:jmock<L>org.jmock.AbstractExpectations.returnValue(java.lang.Object)
org.jmock:jmock<L>org.jmock.internal.ReturnDefaultValueAction.describeTo(Description)
org.jmock:jmock<L>org.jmock.auto.internal.Mockomatic.autoInstantiateStates(java.lang.reflect.Field, java.lang.Object)
org.jmock:jmock<L>org.jmock.internal.InvocationExpectation.performSideEffects()
org.jmock:jmock<L>org.jmock.internal.ObjectMethodExpectationBouncer.fakeHashCode(java.lang.Object)
org.jmock:jmock<L>org.jmock.internal.NamedSequence.constrainAsNextInSequence(InvocationExpectation)
org.jmock:jmock<L>org.jmock.AbstractExpectations.throwException(java.lang.Throwable)
org.jmock:jmock<L>org.jmock.lib.AssertionErrorTranslator.AssertionErrorTranslator()
org.jmock:jmock<L>org.jmock.internal.ChangeStateSideEffect.perform()
org.jmock:jmock<L>org.jmock.lib.concurrent.DeterministicScheduler.blockingOperationsNotSupported()
org.jmock:jmock<L>org.jmock.internal.NamedSequence.InSequenceOrderingConstraint.describeTo(Description)
org.jmock:jmock<L>org.jmock.lib.action.ReturnValueAction.describeTo(Description)
org.dom4j:dom4j<L>org.dom4j.io.STAXEventWriter.STAXEventWriter(java.io.Writer)
org.dom4j:dom4j<L>org.dom4j.swing.BranchTreeNode.getChildCount()
org.dom4j:dom4j<L>org.dom4j.tree.FilterIterator.findNext()
org.dom4j:dom4j<L>org.dom4j.jaxb.JAXBReader.PruningElementHandler.PruningElementHandler()
org.dom4j:dom4j<L>org.dom4j.Node.selectNodes(java.lang.String, java.lang.String)
org.dom4j:dom4j<L>org.dom4j.io.XMLWriter.notationDecl(java.lang.String, java.lang.String, java.lang.String)
org.dom4j:dom4j<L>org.dom4j.tree.AbstractProcessingInstruction.toString()
org.dom4j:dom4j<L>org.dom4j.tree.ElementQNameIterator.matches(Node)
org.dom4j:dom4j<L>org.dom4j.Branch.normalize()
org.dom4j:dom4j<L>org.dom4j.dom.DOMNodeHelper.getLocalName(Node)
org.dom4j:dom4j<L>org.dom4j.DocumentFactory.createQName(java.lang.String)
org.dom4j:dom4j<L>org.dom4j.XPath.selectSingleNode(java.lang.Object)
org.dom4j:dom4j<L>org.dom4j.tree.DefaultComment.DefaultComment(java.lang.String)
org.dom4j:dom4j<L>org.dom4j.swing.DocumentTreeModel.DocumentTreeModel(Document)
org.dom4j:dom4j<L>org.dom4j.tree.NamespaceCache.createNamespace(java.lang.String, java.lang.String)
org.jdom:jdom<L>org.jdom2.transform.JDOMSource.setXMLReader(org.xml.sax.XMLReader)
org.jdom:jdom<L>org.jdom2.test.cases.input.TestStAXEventBuilder.testComplexDocument()
org.jdom:jdom<L>org.jdom2.input.sax.BuilderErrorHandler.warning(org.xml.sax.SAXParseException)
org.jdom:jdom<L>org.jdom2.test.cases.xpath.AbstractTestXPath.checkXPath(java.lang.String, java.lang.Object, java.lang.String, java.lang.Object...)
org.jdom:jdom<L>org.jdom2.output.Format.setEncoding(java.lang.String)
org.jdom:jdom<L>org.jdom2.test.cases.TestAttribute.test_TCM__Object_clone()
org.jdom:jdom<L>org.jdom2.test.cases.xpath.AbstractTestXPathCompiled.getXPathString()
org.jdom:jdom<L>org.jdom2.test.cases.output.TestXMLOutputter.testXMLOutputterXMLOutputProcessor()
org.jdom:jdom<L>org.jdom2.ContentList.CLListIterator.checkConcurrent()
org.jdom:jdom<L>org.jdom2.Content.setParent(Parent)
org.jdom:jdom<L>org.jdom2.contrib.input.LineNumberSAXHandler.MyJDOMFactory.element(final int, final int, String, Namespace)
org.jdom:jdom<L>org.jdom2.test.cases.TestProcessingInstruction.testIllegalData()
org.jdom:jdom<L>org.jdom2.output.StAXEventOutputter.setEventFactory(javax.xml.stream.XMLEventFactory)
org.jdom:jdom<L>org.jdom2.Verifier.isURICharacter(char)
org.jdom:jdom<L>org.jdom2.test.cases.filter.TestPassThroughFilter.testPassThroughFilterEmpty()
junit:junit<L>junit.framework.ComparisonFailure.getExpected()
junit:junit<L>org.junit.validator.AnnotationsValidator.AnnotatableValidator.validateTestClass(TestClass)
junit:junit<L>junit.extensions.TestSetup.TestSetup(Test)
junit:junit<L>junit.textui.TestRunner.testEnded(java.lang.String)
junit:junit<L>org.junit.experimental.theories.Theories.methodBlock(final FrameworkMethod)
junit:junit<L>org.junit.runner.Result.SerializedForm.deserialize(java.io.ObjectInputStream)
junit:junit<L>org.junit.internal.matchers.StacktracePrintingMatcher.readStacktrace(java.lang.Throwable)
junit:junit<L>junit.framework.TestCase.format(java.lang.String, java.lang.Object, java.lang.Object)
junit:junit<L>org.junit.ComparisonFailure.ComparisonCompactor.compact(java.lang.String)
junit:junit<L>org.junit.rules.ExpectedExceptionMatcherBuilder.castedMatchers()
junit:junit<L>junit.framework.TestCase.assertTrue(java.lang.String, boolean)
junit:junit<L>org.junit.rules.TemporaryFolder.recursiveDelete(java.io.File)
junit:junit<L>org.junit.internal.matchers.ThrowableCauseMatcher.hasCause(final Matcher<?>)
junit:junit<L>junit.framework.TestCase.assertEquals(java.lang.String, float, float, float)
junit:junit<L>org.junit.internal.TextListener.elapsedTimeAsString(long)
org.testng:testng<L>org.testng.internal.Utils.isStringEmpty(java.lang.String)
org.testng:testng<L>org.testng.reporters.XMLReporterConfig.isGenerateTestResultAttributes()
org.testng:testng<L>org.testng.internal.annotations.AnnotationHelper.findConfiguration(IAnnotationFinder, ConstructorOrMethod)
org.testng:testng<L>org.testng.xml.IPostProcessor.process(Collection<XmlSuite>)
org.testng:testng<L>org.testng.asserts.Assertion.assertEquals(java.util.Set<?>, java.util.Set<?>)
org.testng:testng<L>org.testng.internal.annotations.IDataProvidable.setDataProvider(java.lang.String)
org.testng:testng<L>org.testng.reporters.XMLStringBuffer.XMLStringBuffer()
org.testng:testng<L>org.testng.internal.RuntimeBehavior.enforceThreadAffinity()
org.testng:testng<L>org.testng.internal.annotations.JDK15TagFactory.findInherited(T, java.lang.Class<?>, java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.String, org.testng.internal.annotations.JDK15TagFactory.Default<T>)
org.testng:testng<L>org.testng.internal.reflect.ArrayEndingMethodMatcher.getConformanceInjectsOrder()
org.testng:testng<L>org.testng.reporters.XMLReporter.getConfig()
org.testng:testng<L>org.testng.Assert.assertNotEquals(java.util.Set<?>, java.util.Set<?>, java.lang.String)
org.testng:testng<L>org.testng.xml.LaunchSuite.MethodsSuite.initContentBuffer(XMLStringBuffer)
org.testng:testng<L>org.testng.internal.ConfigurationMethod.hasAfterGroupsConfiguration()
org.testng:testng<L>org.testng.internal.TestNGMethodFinder.getAfterSuiteMethods(java.lang.Class<?>)
log4j:log4j<L>org.apache.log4j.spi.NOPLogger.getChainedPriority()
log4j:log4j<L>org.apache.log4j.jmx.AbstractDynamicMBean.preRegister(javax.management.MBeanServer, javax.management.ObjectName)
log4j:log4j<L>org.apache.log4j.lf5.util.DateFormatManager.setPattern(java.lang.String)
log4j:log4j<L>org.apache.log4j.helpers.CyclicBuffer.get()
log4j:log4j<L>org.apache.log4j.Category.shutdown()
log4j:log4j<L>org.apache.log4j.helpers.AbsoluteTimeDateFormat.format(java.util.Date, java.lang.StringBuffer, java.text.FieldPosition)
log4j:log4j<L>org.apache.log4j.helpers.NullEnumeration.getInstance()
log4j:log4j<L>org.apache.log4j.net.JMSSink.main(java.lang.String[])
log4j:log4j<L>org.apache.log4j.lf5.viewer.configure.MRUFileManager.moveToTop(int)
log4j:log4j<L>org.apache.log4j.PropertyConfigurator.registryPut(Appender)
log4j:log4j<L>org.apache.log4j.helpers.LogLog.error(java.lang.String)
log4j:log4j<L>org.apache.log4j.ConsoleAppender.SystemOutStream.SystemOutStream()
log4j:log4j<L>org.apache.log4j.helpers.BoundedFIFO.length()
log4j:log4j<L>org.apache.log4j.spi.ErrorHandler.setAppender(Appender)
log4j:log4j<L>org.apache.log4j.FileAppender.getFile()
org.slf4j:slf4j-api<L>org.slf4j.helpers.MarkerIgnoringBase.trace(Marker, String, Object...)
org.slf4j:slf4j-api<L>org.slf4j.event.DefaultLoggingEvent.getArgumentArray()
org.slf4j:slf4j-api<L>org.slf4j.event.SubstituteLoggingEvent.setLoggerName(java.lang.String)
org.slf4j:slf4j-api<L>org.slf4j.Logger.isTraceEnabled(Marker)
org.slf4j:slf4j-api<L>org.slf4j.event.SubstituteLoggingEvent.setThreadName(java.lang.String)
org.slf4j:slf4j-api<L>org.slf4j.Logger.warn(java.lang.String)
org.slf4j:slf4j-api<L>org.slf4j.helpers.BasicMarker.contains(java.lang.String)
org.slf4j:slf4j-api<L>org.slf4j.helpers.NOPLogger.warn(java.lang.String, java.lang.Object...)
org.slf4j:slf4j-api<L>org.slf4j.helpers.MessageFormatter.safeObjectAppend(java.lang.StringBuilder, java.lang.Object)
org.slf4j:slf4j-api<L>org.slf4j.Logger.debug(Marker, String, Throwable)
org.slf4j:slf4j-api<L>org.slf4j.helpers.BasicMarker.contains(Marker)
org.slf4j:slf4j-api<L>org.slf4j.Marker.hasChildren()
org.slf4j:slf4j-api<L>org.slf4j.helpers.NormalizedParameters.getMessage()
org.slf4j:slf4j-api<L>org.slf4j.LoggerFactoryFriend.setDetectLoggerNameMismatch(boolean)
org.slf4j:slf4j-api<L>org.slf4j.helpers.SubstituteLogger.trace(java.lang.String, java.lang.Object, java.lang.Object)
com.github.javaparser:javaparser-core<L>com.github.javaparser.ast.visitor.GenericListVisitorAdapter.visit(com.github.javaparser.ast.stmt.ThrowStmt, A)
com.github.javaparser:javaparser-core<L>com.github.javaparser.ast.nodeTypes.NodeWithAnnotations.addSingleMemberAnnotation(java.lang.String, com.github.javaparser.ast.expr.Expression)
com.github.javaparser:javaparser-core<L>com.github.javaparser.metamodel.ClassOrInterfaceDeclarationMetaModel.ClassOrInterfaceDeclarationMetaModel(java.util.Optional<com.github.javaparser.metamodel.BaseNodeMetaModel>)
com.github.javaparser:javaparser-core<L>com.github.javaparser.ast.comments.BlockComment.accept(com.github.javaparser.ast.visitor.VoidVisitor<A>, A)
com.github.javaparser:javaparser-core<L>com.github.javaparser.ast.NodeList.addBefore(N, N)
com.github.javaparser:javaparser-core<L>com.github.javaparser.ast.modules.ModuleDeclaration.remove(com.github.javaparser.ast.Node)
com.github.javaparser:javaparser-core<L>com.github.javaparser.ast.expr.FieldAccessExpr.setTypeArguments(com.github.javaparser.ast.NodeList<com.github.javaparser.ast.type.Type>)
com.github.javaparser:javaparser-core<L>com.github.javaparser.ParseProblemException.ParseProblemException(java.lang.Throwable)
com.github.javaparser:javaparser-core<L>com.github.javaparser.ast.Node.replace(com.github.javaparser.ast.Node, com.github.javaparser.ast.Node)
com.github.javaparser:javaparser-core<L>com.github.javaparser.ParserConfiguration.getTabSize()
com.github.javaparser:javaparser-core<L>com.github.javaparser.AbstractCharStream.internalAdjustBuffSize()
com.github.javaparser:javaparser-core<L>com.github.javaparser.utils.SourceRoot.SourceRoot(java.nio.file.Path, com.github.javaparser.ParserConfiguration)
com.github.javaparser:javaparser-core<L>com.github.javaparser.ast.type.Type.ifVarType(java.util.function.Consumer<com.github.javaparser.ast.type.VarType>)
com.github.javaparser:javaparser-core<L>com.github.javaparser.GeneratedJavaParserTokenManager.jjMoveStringLiteralDfa9_0(long, long, long, long)
com.github.javaparser:javaparser-core<L>com.github.javaparser.printer.DefaultPrettyPrinterVisitor.visit(com.github.javaparser.ast.modules.ModuleProvidesDirective, java.lang.Void)
org.walkmod:javalang<L>org.walkmod.javalang.ast.ImportDeclaration.setUsages(List<SymbolReference>)
org.walkmod:javalang<L>org.walkmod.javalang.visitors.DumpVisitor.visit(ObjectCreationExpr, Object)
org.walkmod:javalang<L>org.walkmod.javalang.ast.Node.toString()
org.walkmod:javalang<L>org.walkmod.javalang.visitors.VoidVisitor.visit(SingleMemberAnnotationExpr, A)
org.walkmod:javalang<L>org.walkmod.javalang.ast.expr.MethodReferenceExpr.getTypeDefinitions()
org.walkmod:javalang<L>org.walkmod.javalang.ast.body.VariableDeclarator.setBodyReferences(List<SymbolReference>)
org.walkmod:javalang<L>org.walkmod.javalang.ast.body.BaseParameter.getBodyReferences()
org.walkmod:javalang<L>org.walkmod.javalang.ast.stmt.EmptyStmt.clone()
org.walkmod:javalang<L>org.walkmod.javalang.visitors.CompositeVisitor.visit(VariableDeclaratorId, VisitorContext)
org.walkmod:javalang<L>org.walkmod.javalang.visitors.CloneVisitor.visit(ImportDeclaration, Object)
org.walkmod:javalang<L>org.walkmod.javalang.visitors.GenericVisitor.visit(QualifiedNameExpr, A)
org.walkmod:javalang<L>org.walkmod.javalang.ast.body.ConstructorDeclaration.setUsages(List<SymbolReference>)
org.walkmod:javalang<L>org.walkmod.javalang.ast.stmt.ExpressionStmt.removeChild(Node)
org.walkmod:javalang<L>org.walkmod.javalang.visitors.CloneVisitor.visit(DoubleLiteralExpr, Object)
org.walkmod:javalang<L>org.walkmod.javalang.tags.JavaCharStream.ReInit(java.io.InputStream, int, int, int)
org.jxls:jxls-jexcel<L>org.jxls.transform.jexcel.JexcelUtil.isJxComment(java.lang.String)
org.jxls:jxls-jexcel<L>org.jxls.transform.jexcel.JexcelTransformer.getCommentedCells()
org.jxls:jxls-jexcel<L>org.jxls.transform.jexcel.JexcelContext.JexcelContext(java.util.Map<java.lang.String, java.lang.Object>)
org.jxls:jxls-jexcel<L>org.jxls.transform.jexcel.JexcelTransformer.readCommentsFromSheet(Sheet, Cell[])
org.jxls:jxls-jexcel<L>org.jxls.transform.jexcel.JexcelTransformer.findSheetIndex(java.lang.String)
org.jxls:jxls-jexcel<L>org.jxls.transform.jexcel.JexcelTransformer.copyMergedRegions(CellData, CellRef)
org.jxls:jxls-jexcel<L>org.jxls.transform.jexcel.JexcelRowData.createRowData(Sheet, int, JexcelTransformer)
org.jxls:jxls-jexcel<L>org.jxls.transform.jexcel.JexcelTransformer.JexcelTransformer(Workbook, WritableWorkbook)
org.jxls:jxls-jexcel<L>org.jxls.transform.jexcel.WritableHyperlinkCell.WritableHyperlinkCell(java.net.URL, java.lang.String)
org.jxls:jxls-jexcel<L>org.jxls.transform.jexcel.JexcelTransformer.createTransformer(java.io.InputStream, java.io.OutputStream)
org.jxls:jxls-jexcel<L>org.jxls.transform.jexcel.JexcelSheetData.getMergedCells()
org.jxls:jxls-jexcel<L>org.jxls.transform.jexcel.JexcelTransformer.JexcelTransformer()
org.jxls:jxls-jexcel<L>org.jxls.transform.jexcel.JexcelCellData.updateCellGeneralInfo(WritableCell)
org.jxls:jxls-jexcel<L>org.jxls.transform.jexcel.JexcelTransformer.createSheet(java.lang.String, java.lang.String)
org.jxls:jxls-jexcel<L>org.jxls.transform.jexcel.JexcelTransformer.resetArea(AreaRef)
org.easybatch:easybatch-msexcel<L>org.easybatch.extensions.msexcel.MsExcelRecordReader.getDataSourceName()
org.easybatch:easybatch-msexcel<L>org.easybatch.extensions.msexcel.MsExcelCell.getCellType()
org.easybatch:easybatch-msexcel<L>org.easybatch.extensions.msexcel.MsExcelCell.getSheet()
org.easybatch:easybatch-msexcel<L>org.easybatch.extensions.msexcel.MsExcelCell.getCellStyle()
org.easybatch:easybatch-msexcel<L>org.easybatch.extensions.msexcel.MsExcelCell.getAddress()
org.easybatch:easybatch-msexcel<L>org.easybatch.extensions.msexcel.MsExcelCell.getDateCellValue()
org.easybatch:easybatch-msexcel<L>org.easybatch.extensions.msexcel.MsExcelRow.MsExcelRow()
org.easybatch:easybatch-msexcel<L>org.easybatch.extensions.msexcel.MsExcelRecordWriter.setValue(XSSFCell, Cell)
org.easybatch:easybatch-msexcel<L>org.easybatch.extensions.msexcel.MsExcelCell.getHyperlink()
org.easybatch:easybatch-msexcel<L>org.easybatch.extensions.msexcel.MsExcelCell.getRow()
org.easybatch:easybatch-msexcel<L>org.easybatch.extensions.msexcel.MsExcelCell.setCellComment(Comment)
org.easybatch:easybatch-msexcel<L>org.easybatch.extensions.msexcel.MsExcelRecordMarshaller.processRecord(Record<P>)
org.easybatch:easybatch-msexcel<L>org.easybatch.extensions.msexcel.MsExcelRow.createCell(int, int)
org.easybatch:easybatch-msexcel<L>org.easybatch.extensions.msexcel.MsExcelCell.setCellValue(java.util.Calendar)
org.easybatch:easybatch-msexcel<L>org.easybatch.extensions.msexcel.MsExcelCell.setCellFormula(java.lang.String)
com.dslplatform:dsl-json<L>com.dslplatform.json.NumberConverter.parsePositiveInt(final byte[], final JsonReader, final int, final int, final int)
com.dslplatform:dsl-json<L>com.dslplatform.json.JsonWriter.writeByte(byte)
com.dslplatform:dsl-json<L>com.dslplatform.json.NumberConverter.deserializeFloatArray(final JsonReader)
com.dslplatform:dsl-json<L>com.dslplatform.json.UUIDConverter.deserialize(final JsonReader)
com.dslplatform:dsl-json<L>com.dslplatform.json.DslJson.deserialize(java.lang.Class<TResult>, java.io.InputStream, byte[])
com.dslplatform:dsl-json<L>com.dslplatform.json.DslJson.tryFindReader(java.lang.Class<T>)
com.dslplatform:dsl-json<L>com.dslplatform.json.NetConverter.deserializeIpNullableCollection(final JsonReader)
com.dslplatform:dsl-json<L>com.dslplatform.json.JsonReader.WithReader.hasNext()
com.dslplatform:dsl-json<L>com.dslplatform.json.JavaGeomConverter.deserializeLocationCollection(final JsonReader, final Collection<Point2D>)
com.dslplatform:dsl-json<L>com.dslplatform.json.ExternalConverterAnalyzer.ExternalConverterAnalyzer(java.util.Collection<java.lang.ClassLoader>)
com.dslplatform:dsl-json<L>com.dslplatform.json.ParsingException.ParsingException(java.lang.String)
com.dslplatform:dsl-json<L>com.dslplatform.json.Grisu3.FastDtoaBuilder.append(byte)
com.dslplatform:dsl-json<L>com.dslplatform.json.XmlConverter.deserializeCollection(final JsonReader)
com.dslplatform:dsl-json<L>com.dslplatform.json.NumberConverter.write(JsonWriter, @Nullable Double)
com.dslplatform:dsl-json<L>com.dslplatform.json.DslJson.getRegisteredBinders()